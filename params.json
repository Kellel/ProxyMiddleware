{"name":"Proxymiddleware","tagline":"A shim for wsgi applications behind nginx","body":"ProxyMiddleware\r\n===============\r\n\r\nA collection of WSGI application wrappers\r\n\r\nReverseProxied\r\n--------------\r\nA shim for wsgi applications behind nginx\r\n\r\nA common problem that I have ran into when hosting wsgi applications behind a nginx reverse proxy is the rewriting of urls being returned from the upstream server.\r\n\r\nThis little bit of wsgi middleware will rewrite the script name variable based on a variable set in your nginx config.\r\n\r\nAdd this line to your nginx config:\r\n\r\n    proxy_set_header X-SCRIPT-NAME /path;\r\n    \r\nAnd this line to your wsgi file:\r\n\r\n    application = ReverseProxied(application)\r\n\r\n\r\n*Note:* Variations of this code exist in other places on the internet. I do not claim to be the person who came up with this. I just love it and need somewhere I can easily find it.\r\n\r\nTrailing Slash\r\n--------------\r\n\r\nThis module attempts to solve the problem of web apps expecting a trailing slash, but not receiving them. The module does the following in this exact order:\r\n\r\n1. Try the original route. If the route returns anything but a 404 return the response\r\n2. If the original route does return a 404 then append a slash.\r\n3. Try the new route. If it succeeds return the response.\r\n4. If the new route fails then we restore the original environment variables and continue on.\r\n\r\nAnd this line to your wsgi file:\r\n\r\n    application = TrailingSlash(application)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}